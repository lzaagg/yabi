<project name="yabi" default="userwar" basedir=".">

    <import file="changelog.xml"/>

    <target name="init">
      <!-- Create the time stamp -->
      <tstamp/>
    </target>

    <!-- init needed when making a release -->
    <target name="releaseinit" depends="init, tagFail, createTmp">
      <property name="ccg.site" value="${basedir}/tmp"/>
      <property name="ccg.buildname" value="${cbbc.tag}"/>
      <property name="ccg.toolsroot" value="/yabi/yabi-tools/"/>
      <property name="ccg.jsonroot" value="/yabi/yabi-json/"/>
      <property name="ccg.resourcesDir" value="${basedir}/tmp/ccg/yabi-mw/"/>
      <property name="ccg.approot" value="/usr/local/java/glassfish/domains/domain1/autodeploy/"/>
      <property name="ccg.dbhost" value="gromit4.localdomain"/>
      <property name="ccg.dbuser" value="yabimwapp"/> 
      <property name="ccg.dbpass" value="yabimwapp"/>
      <property name="ccg.dbname" value="yabimw"/>
      <property name="ccg.warfilename" value="${basedir}/yabi-${ccg.buildname}.war"/>
      <property name="ccg.srcdir" value="${ccg.resourcesDir}src"/>
      <property name="ccg.cfgdir" value="${ccg.resourcesDir}cfg"/>
      <property name="ccg.libdir" value="${ccg.resourcesDir}lib"/>
      <property name="ccg.tpldir" value="${ccg.resourcesDir}templates"/>
      <property name="ccg.mailTo" value="alerts@ccg.murdoch.edu.au"/>
      <property name="ccg.yabiCertDir" value="/yabi/certificates/"/>
    </target>

    <!-- init needed when making a snapshot release -->
    <target name="snapshotinit" depends="init, createTmp">
      <property name="ccg.site" value="${basedir}/tmp"/>
      <property name="ccg.buildname" value="snapshot"/>
      <property name="ccg.toolsroot" value="/yabi/yabi-tools/"/>
      <property name="ccg.jsonroot" value="/yabi/yabi-json/"/>
      <property name="ccg.resourcesDir" value="${basedir}/tmp/ccg/yabi-mw/"/>
      <property name="ccg.approot" value="/usr/local/java/glassfish/domains/domain2/autodeploy/"/>
      <property name="ccg.dbhost" value="boromirdb.localdomain"/>
      <property name="ccg.dbuser" value="yabimwapp"/> 
      <property name="ccg.dbpass" value="yabimwapp"/>
      <property name="ccg.dbname" value="yabimwdev"/>
      <property name="ccg.warfilename" value="${basedir}/yabi-${ccg.buildname}.war"/>
      <property name="ccg.srcdir" value="${ccg.resourcesDir}src"/>
      <property name="ccg.cfgdir" value="${ccg.resourcesDir}cfg"/>
      <property name="ccg.libdir" value="${ccg.resourcesDir}lib"/>
      <property name="ccg.tpldir" value="${ccg.resourcesDir}templates"/>
      <property name="ccg.mailTo" value="alerts@ccg.murdoch.edu.au"/>
      <property name="ccg.yabiCertDir" value="/yabi/certificates/"/>
    </target>

    <!-- init needed when doing a user deploy -->
    <target name="userbuildinit" depends="createTmp">
      <property name="ccg.site" value="${basedir}/tmp"/>
      <property name="ccg.buildname" value="${user.name}"/>
      <property name="ccg.toolsroot" value="/yabi/yabi-tools/"/>
      <property name="ccg.jsonroot" value="/yabi/yabi-json/"/>
      <property name="ccg.resourcesDir" value="${basedir}"/>
      <property name="ccg.approot" value="/usr/local/java/glassfish/domains/domain2/autodeploy/"/>
      <property name="ccg.dbhost" value="boromirdb.localdomain"/>
      <property name="ccg.dbuser" value="yabimwapp"/> 
      <property name="ccg.dbpass" value="yabimwapp"/>
      <property name="ccg.dbname" value="yabimwdev"/>
      <property name="ccg.warfilename" value="${basedir}/yabi-${ccg.buildname}.war"/>
      <property name="ccg.jarfilename" value="${basedir}/yabi-${ccg.buildname}.jar"/>
      <property name="ccg.srcdir" value="${basedir}/src"/>
      <property name="ccg.cfgdir" value="${basedir}/cfg"/>
      <property name="ccg.libdir" value="${basedir}/lib"/>
      <property name="ccg.tpldir" value="${basedir}/templates"/>
      <property name="ccg.mailTo" value="${user.name}@ccg.murdoch.edu.au"/>
    </target>

    <!-- remove tmp and recreate it -->
    <target name="createTmp">
      <delete dir="tmp" verbose="true"/>
      <mkdir dir="tmp/classes"/>
    </target>
    <target name="createTmpAgain">
      <delete dir="tmp"/>
      <mkdir dir="tmp/classes"/>
    </target>

    <!-- echo all properties -->
    <target name="echoproperties">
      <echoproperties/>
    </target>

    <!-- Create properties file describing this deployment -->
    <target name="deployProperties" depends="init">
      <propertyfile file="${ccg.site}/deploy.properties" comment="Deploy properties">
        <entry  key="user" value="${user.name}"/>
        <entry  key="buildname" value="${ccg.buildname}"/>
        <entry  key="toolsroot" value="${ccg.toolsroot}"/>
        <entry  key="project" value="${ant.project.name}"/>
        <entry  key="projectDir" value="${basedir}"/>
        <entry  key="build.xml" value="${ant.file}"/>
        <entry  key="approot" value="${ccg.approot}"/>
        <entry  key="buildDate" type="date" value="now" pattern="dd-MM-yyyy HH.mm.ss"/>
        <entry  key="buildNumber" type="int" operation="+" default="0000" pattern="0000"/>
      </propertyfile>
      <chmod perm="g+rw" file="${ccg.site}/deploy.properties"/>
    </target>

    <target name="compile" depends="appProperties">
      <javac srcdir="${ccg.srcdir}" destdir="${ccg.site}/classes" target="1.4" source="1.4">
        <classpath>
          <fileset dir="${ccg.libdir}">
            <include name="**/*.jar"/>
          </fileset>
          <fileset file="/usr/local/java/tomcat/common/lib/servlet-api.jar"/>
        </classpath>
      </javac>
    </target>
    
    <target name="nttcompile" depends="appProperties">
      <javac srcdir="${ccg.srcdir}" destdir="${ccg.site}/classes" target="1.4" source="1.4">
        <classpath>
          <fileset dir="${ccg.libdir}">
            <include name="**/*.jar"/>
          </fileset>
          <fileset file="/Users/ntt/Projects/yabi-fe-symfony/httpunit/jars/servlet.jar"/>
        </classpath>
      </javac>
    </target>

    <target name="jar">
      <jar jarfile="${ccg.jarfilename}" basedir="${ccg.site}/classes/" compress="false" />
    </target>
    
    <!-- Create properties file containing attributes for munging -->
    <target name="appProperties" depends="init">
      <propertyfile file="${ccg.site}/yabi-mw.properties" comment="App properties">
        <entry  key="buildname" value="${ccg.buildname}"/>
        <entry  key="project" value="${ant.project.name}"/>
        <entry  key="approot" value="${ccg.approot}"/>
        <entry  key="toolsroot" value="${ccg.toolsroot}"/>
        <entry  key="dbhost" value="${ccg.dbhost}"/>
        <entry  key="dbuser" value="${ccg.dbuser}"/>
        <entry  key="dbpass" value="${ccg.dbpass}"/>
        <entry  key="dbname" value="${ccg.dbname}"/>
        <entry  key="error.mailTo" value="${ccg.mailTo}"/>
        <entry  key="hibernate.configfile" value="yabi-hibernate.cfg.xml"/>
        <entry  key="jbpmconfigfile" value="yabi-jbpm.cfg.xml"/>
      </propertyfile>
    </target>

    <!-- config file copy and munge/rename -->
	<target name="configCopy">
	  <echo message="Copying config files to classes folder"/>
      <filter filtersfile="${ccg.site}/yabi-mw.properties"/>
	  <copy file="${ccg.cfgdir}/jbpm.cfg.xml" tofile="${ccg.site}/classes/yabi-jbpm.cfg.xml" filtering="true" overwrite="true"/>
	  <copy file="${ccg.cfgdir}/log4j.properties" tofile="${ccg.site}/classes/log4j.properties" overwrite="true"/>
      <copy file="${ccg.cfgdir}/hibernate.cfg.xml" tofile="${ccg.site}/classes/yabi-hibernate.cfg.xml" filtering="true" overwrite="true"/>
      <copy file="${ccg.cfgdir}/web.xml" tofile="${ccg.site}/web.xml" filtering="true" overwrite="true"/>
      <copy file="${ccg.cfgdir}/velocityxml.cfg" tofile="${ccg.site}/cfg/velocityxml.cfg" overwrite="true"/>
      <copy file="${ccg.cfgdir}/velocitytxt.cfg" tofile="${ccg.site}/cfg/velocitytxt.cfg" overwrite="true"/>
      <copy file="${ccg.cfgdir}/struts-config.xml" tofile="${ccg.site}/cfg/struts-config.xml" overwrite="true"/>
      <copy file="${ccg.cfgdir}/toolbox.xml" tofile="${ccg.site}/cfg/toolbox.xml" overwrite="true"/>
      <copy file="${ccg.cfgdir}/hibernate/StringInstance.hbm.xml" tofile="${ccg.site}/classes/StringInstance.hbm.xml" overwrite="true"/>
      <copy file="${ccg.cfgdir}/hibernate/StringUpdateLog.hbm.xml" tofile="${ccg.site}/classes/StringUpdateLog.hbm.xml" overwrite="true"/>
      <copy file="${ccg.cfgdir}/hibernate/HibernateStringInstance.hbm.xml" tofile="${ccg.site}/classes/HibernateStringInstance.hbm.xml" overwrite="true"/>
      <copy file="${ccg.cfgdir}/yabi-mw.properties" tofile="${ccg.site}/classes/yabi-mw.properties" filtering="true" overwrite="true"/>
      <copy file="${ccg.cfgdir}/baat.dtd" tofile="${ccg.site}/classes/au/edu/murdoch/ccg/baat.dtd" overwrite="true"/>
      <copy file="${ccg.cfgdir}/client-config.wsdd" tofile="${ccg.site}/classes/client-config.wsdd"/>
      <copy file="${ccg.cfgdir}/client-jndi-config.xml" tofile="${ccg.site}/classes/client-jndi-config.xml"/>
      <copy file="${ccg.cfgdir}/client-server-config.wsdd" tofile="${ccg.site}/classes/client-server-config.wsdd"/>
      <copy file="${ccg.cfgdir}/global_security_descriptor.xml" tofile="${ccg.site}/classes/global_security_descriptor.xml"/>
	</target>

    <target name="templateCopy">
      <filter filtersfile="${ccg.site}/yabi-mw.properties"/>
      <copy todir="${ccg.site}/templates" filtering="true" overwrite="true">
        <fileset dir="${ccg.tpldir}">
          <include name="**"/>
        </fileset>
      </copy>
    </target>

    <target name="tagFail" unless="cbbc.tag">
      <fail>cbbc.tag must be set</fail>
    </target>

    <target name="tmpSvnCheckoutTag">
      <exec executable="svn" failonerror="true">
      <arg line="co svn+ssh://grendel@minerva.localdomain/usr/local/svnroot/ccg/yabi/yabi-mw-tags/${cbbc.tag} tmp/ccg/yabi-mw"/>
      </exec>
    </target>

    <target name="tmpSvnCheckout">
      <exec executable="svn" failonerror="true">
      <arg line="co svn+ssh://${user.name}@minerva.localdomain/usr/local/svnroot/ccg/yabi/yabi-mw/ tmp/ccg/yabi-mw/"/>
      </exec>
    </target>
	
    <!-- json in the middleware. curious -->
    <target name="deployJson" depends="init">
      <delete dir="${ccg.jsonroot}" verbose="true"/>
      <mkdir dir="${ccg.jsonroot}"/>
      <copy todir="${ccg.jsonroot}" >
        <fileset dir="${ccg.resourcesDir}/yabi-json/" >
          <include name="**/*"/>
        </fileset>
      </copy>
    </target>


    <target name="deployTools" depends="init">
      <delete dir="${ccg.toolsroot}" verbose="true"/>
      <mkdir dir="${ccg.toolsroot}"/>
      <copy todir="${ccg.toolsroot}" >
        <fileset dir="${ccg.resourcesDir}/yabi-tools/" >
          <include name="**/*"/>
        </fileset>
      </copy>
    </target>

    <!-- add items here when you wish to add tools to yabi's tool menu -->
    <target name="deployToolsDirs" depends="deployTools">

        <!-- DEFAULT TOOLS -->
        <mkdir dir="${ccg.toolsroot}/default/" />
        <mkdir dir="${ccg.toolsroot}/default/select data/" />
        <mkdir dir="${ccg.toolsroot}/default/blast search/" />
        <mkdir dir="${ccg.toolsroot}/default/file tools/" />
        <mkdir dir="${ccg.toolsroot}/default/convertors/" />
        <mkdir dir="${ccg.toolsroot}/default/sequence tools/" />
        <mkdir dir="${ccg.toolsroot}/default/assembly/" />
        <mkdir dir="${ccg.toolsroot}/default/repeat search/" />
        <mkdir dir="${ccg.toolsroot}/default/multiple sequence alignment/" />
        <mkdir dir="${ccg.toolsroot}/default/sequence alignment/" />
        <mkdir dir="${ccg.toolsroot}/default/open reading frames/" />
        <mkdir dir="${ccg.toolsroot}/default/protein tools/" />
        <mkdir dir="${ccg.toolsroot}/default/EMBOSS/" />
        <mkdir dir="${ccg.toolsroot}/default/text tools/" />
        <mkdir dir="${ccg.toolsroot}/default/cognac.ivec.org/" />

        <!-- select data -->
        <symlink link="${ccg.toolsroot}/default/select data/fileselector.xml" resource="${ccg.toolsroot}/fileselector.xml" />
        <symlink link="${ccg.toolsroot}/default/select data/fileuploader.xml" resource="${ccg.toolsroot}/fileuploader.xml" />
        <symlink link="${ccg.toolsroot}/default/select data/fetchgenbankrecord.xml" resource="${ccg.toolsroot}/fetchgenbankrecord.xml" />
        <symlink link="${ccg.toolsroot}/default/select data/fetchfastarecord.xml" resource="${ccg.toolsroot}/fetchfastarecord.xml" />

        <!-- alignment -->
        <symlink link="${ccg.toolsroot}/default/blast search/blast.xml" resource="${ccg.toolsroot}/blast.xml" />
        <symlink link="${ccg.toolsroot}/default/blast search/blast2html.xml" resource="${ccg.toolsroot}/blast2html.xml" />
        <symlink link="${ccg.toolsroot}/default/blast search/blasttophits.xml" resource="${ccg.toolsroot}/blasttophits.xml" />
        <symlink link="${ccg.toolsroot}/default/blast search/blastpgp.xml" resource="${ccg.toolsroot}/blastpgp.xml" />
        <symlink link="${ccg.toolsroot}/default/blast search/mview.xml" resource="${ccg.toolsroot}/mview.xml" />
        <symlink link="${ccg.toolsroot}/default/blast search/ccg-importeric.xml" resource="${ccg.toolsroot}/ccg-importeric.xml" />
        <symlink link="${ccg.toolsroot}/default/blast search/ivec-blastall.xml" resource="${ccg.toolsroot}/ivec-blastall.xml" />

        <!-- cognac.ivec.org -->
        <symlink link="${ccg.toolsroot}/default/cognac.ivec.org/ivec-blastall.xml" resource="${ccg.toolsroot}/ivec-blastall.xml" />
        <symlink link="${ccg.toolsroot}/default/cognac.ivec.org/ivec-phred.xml" resource="${ccg.toolsroot}/ivec-phred.xml" />
        <symlink link="${ccg.toolsroot}/default/cognac.ivec.org/ivec-crossmatch.xml" resource="${ccg.toolsroot}/ivec-crossmatch.xml" />
        <symlink link="${ccg.toolsroot}/default/cognac.ivec.org/ivec-autopcap.xml" resource="${ccg.toolsroot}/ivec-autopcap.xml" />

        <!-- file tools -->
        <symlink link="${ccg.toolsroot}/default/file tools/fileselector.xml" resource="${ccg.toolsroot}/fileselector.xml" />
        <symlink link="${ccg.toolsroot}/default/file tools/fileuploader.xml" resource="${ccg.toolsroot}/fileuploader.xml" />
        <symlink link="${ccg.toolsroot}/default/file tools/zipjob.xml" resource="${ccg.toolsroot}/zipjob.xml" />

        <!-- convertors -->
        <symlink link="${ccg.toolsroot}/default/convertors/fasta2embl.xml" resource="${ccg.toolsroot}/fasta2embl.xml" />
        <symlink link="${ccg.toolsroot}/default/convertors/fasta2emblXml.xml" resource="${ccg.toolsroot}/fasta2emblXml.xml" />
        <symlink link="${ccg.toolsroot}/default/convertors/fasta2genbank.xml" resource="${ccg.toolsroot}/fasta2genbank.xml" />
        <symlink link="${ccg.toolsroot}/default/convertors/fasta2INSDseq.xml" resource="${ccg.toolsroot}/fasta2INSDseq.xml" />
        <symlink link="${ccg.toolsroot}/default/convertors/genbank2fasta.xml" resource="${ccg.toolsroot}/genbank2fasta.xml" />
        <symlink link="${ccg.toolsroot}/default/convertors/embl2emblXml.xml" resource="${ccg.toolsroot}/embl2emblXml.xml" />
        <symlink link="${ccg.toolsroot}/default/convertors/renderyabisimple.xml" resource="${ccg.toolsroot}/renderyabisimple.xml" />

        <!-- seq tools -->
        <symlink link="${ccg.toolsroot}/default/sequence tools/fetchgenbankrecord.xml" resource="${ccg.toolsroot}/fetchgenbankrecord.xml" />
        <symlink link="${ccg.toolsroot}/default/sequence tools/fetchfastarecord.xml" resource="${ccg.toolsroot}/fetchfastarecordcache.xml" />
        <symlink link="${ccg.toolsroot}/default/sequence tools/downloadfasta.xml" resource="${ccg.toolsroot}/downloadfasta.xml" />
        <symlink link="${ccg.toolsroot}/default/sequence tools/fastasplitter.xml" resource="${ccg.toolsroot}/fastasplitter.xml" />
        <symlink link="${ccg.toolsroot}/default/sequence tools/yabixml2fasta.xml" resource="${ccg.toolsroot}/yabixml2fasta.xml" />
        <symlink link="${ccg.toolsroot}/default/sequence tools/genbankfetch.xml" resource="${ccg.toolsroot}/genbankfetch.xml" />
        <symlink link="${ccg.toolsroot}/default/sequence tools/blasttophits.xml" resource="${ccg.toolsroot}/blasttophits.xml" />
        <symlink link="${ccg.toolsroot}/default/sequence tools/getkeggid.xml" resource="${ccg.toolsroot}/getkeggid.xml" />

        <!-- assembly -->
        <symlink link="${ccg.toolsroot}/default/assembly/crossmatch.xml" resource="${ccg.toolsroot}/crossmatch.xml" />
        <symlink link="${ccg.toolsroot}/default/assembly/phred.xml" resource="${ccg.toolsroot}/phred.xml" />
        <symlink link="${ccg.toolsroot}/default/assembly/autopcap.xml" resource="${ccg.toolsroot}/autopcap.xml" />
        <symlink link="${ccg.toolsroot}/default/assembly/prepautopcap.xml" resource="${ccg.toolsroot}/prepautopcap.xml" />

        <!-- repeat search -->
        <symlink link="${ccg.toolsroot}/default/repeat search/repeatmasker.xml" resource="${ccg.toolsroot}/repeatmasker.xml" />
        <symlink link="${ccg.toolsroot}/default/repeat search/censor.xml" resource="${ccg.toolsroot}/censor.xml" />

        <!-- multiple sequence alignment -->
        <symlink link="${ccg.toolsroot}/default/multiple sequence alignment/clustalw.xml" resource="${ccg.toolsroot}/clustalw.xml" />
        <symlink link="${ccg.toolsroot}/default/multiple sequence alignment/t_coffee.xml" resource="${ccg.toolsroot}/t_coffee.xml" />

        <!-- sequence alignment -->
        <symlink link="${ccg.toolsroot}/default/sequence alignment/bl2seq.xml" resource="${ccg.toolsroot}/bl2seq.xml" />
        <symlink link="${ccg.toolsroot}/default/sequence alignment/blat.xml" resource="${ccg.toolsroot}/blat.xml" />
        <symlink link="${ccg.toolsroot}/default/sequence alignment/fasta.xml" resource="${ccg.toolsroot}/fasta.xml" />

        <!-- open reading frames-->
        <symlink link="${ccg.toolsroot}/default/open reading frames/glimmer3.xml" resource="${ccg.toolsroot}/glimmer3.xml" />
        <symlink link="${ccg.toolsroot}/default/open reading frames/glimmerm.xml" resource="${ccg.toolsroot}/glimmerm.xml" />
        <symlink link="${ccg.toolsroot}/default/open reading frames/glimmerhmm.xml" resource="${ccg.toolsroot}/glimmerhmm.xml" />
        <symlink link="${ccg.toolsroot}/default/open reading frames/genscan.xml" resource="${ccg.toolsroot}/genscan.xml" />


        <!-- protein tools -->
        <symlink link="${ccg.toolsroot}/default/protein tools/iprscan.xml" resource="${ccg.toolsroot}/iprscan.xml" />
        <symlink link="${ccg.toolsroot}/default/protein tools/signalp.xml" resource="${ccg.toolsroot}/signalp.xml" />
        <symlink link="${ccg.toolsroot}/default/protein tools/hmmpfam.xml" resource="${ccg.toolsroot}/hmmpfam.xml" />
        <symlink link="${ccg.toolsroot}/default/protein tools/psort.xml" resource="${ccg.toolsroot}/psort.xml" />
        <symlink link="${ccg.toolsroot}/default/protein tools/ps_scan.xml" resource="${ccg.toolsroot}/ps_scan.xml" />

        <!-- EMBOSS -->
        <symlink link="${ccg.toolsroot}/default/EMBOSS/chips.xml" resource="${ccg.toolsroot}/chips.xml" />
        <symlink link="${ccg.toolsroot}/default/EMBOSS/getorf.xml" resource="${ccg.toolsroot}/getorf.xml" />
        <symlink link="${ccg.toolsroot}/default/EMBOSS/extractseq.xml" resource="${ccg.toolsroot}/extractseq.xml" />
        <symlink link="${ccg.toolsroot}/default/EMBOSS/prettyplot.xml" resource="${ccg.toolsroot}/prettyplot.xml" />

        <!-- text tools -->
        <symlink link="${ccg.toolsroot}/default/text tools/sort.xml" resource="${ccg.toolsroot}/sort.xml" />



        <!-- PI TOOLS -->
        <mkdir dir="${ccg.toolsroot}/pi/" />
        <mkdir dir="${ccg.toolsroot}/pi/select data/" />
        <mkdir dir="${ccg.toolsroot}/pi/blast search/" />

        <!-- select data -->
        <symlink link="${ccg.toolsroot}/pi/select data/fileselector.xml" resource="${ccg.toolsroot}/fileselector.xml" />
        <symlink link="${ccg.toolsroot}/pi/select data/fileuploader.xml" resource="${ccg.toolsroot}/fileuploader.xml" />
        <symlink link="${ccg.toolsroot}/pi/select data/fetchgenbankrecord.xml" resource="${ccg.toolsroot}/fetchgenbankrecord.xml" />
        <symlink link="${ccg.toolsroot}/pi/select data/fetchfastarecord.xml" resource="${ccg.toolsroot}/fetchfastarecord.xml" />

        <!-- blast -->
        <symlink link="${ccg.toolsroot}/pi/blast search/proint-blast.xml" resource="${ccg.toolsroot}/proint-blast.xml" />

    

        <!-- celera tools -->
        <mkdir dir="${ccg.toolsroot}/celera/" />
        <mkdir dir="${ccg.toolsroot}/celera/celera assembly/" />

        <!-- celera workflow tools -->
        <symlink link="${ccg.toolsroot}/celera/celera assembly/phred.xml" resource="${ccg.toolsroot}/phred.xml" />
        <symlink link="${ccg.toolsroot}/celera/celera assembly/lucy.xml" resource="${ccg.toolsroot}/lucy.xml" />
        <symlink link="${ccg.toolsroot}/celera/celera assembly/figaro.xml" resource="${ccg.toolsroot}/figaro.xml" />
        <symlink link="${ccg.toolsroot}/celera/celera assembly/figaro_trim_seq.xml" resource="${ccg.toolsroot}/figaro_trim_seq.xml" />
        <symlink link="${ccg.toolsroot}/celera/celera assembly/amos2frg.xml" resource="${ccg.toolsroot}/amos2frg.xml" />
        <symlink link="${ccg.toolsroot}/celera/celera assembly/toAmos.xml" resource="${ccg.toolsroot}/toAmos.xml" />
        <symlink link="${ccg.toolsroot}/celera/celera assembly/runCA.xml" resource="${ccg.toolsroot}/runCA.xml" />


    </target>


	<target name="createWar" depends="appProperties, configCopy, templateCopy, compile">
	  <war destfile="${ccg.warfilename}" webxml="${ccg.site}/web.xml">
	  	<fileset dir="${ccg.site}">
            <include name="templates/**"/>
        </fileset>
	  	<lib dir="${ccg.libdir}"/>
	  	<classes dir="${ccg.site}/classes"/>
        <webinf dir="${ccg.site}/cfg">
            <include name="*"/>
        </webinf>
	  </war>
	</target>
	
	<target name="deployWar">
	  <copy file="${ccg.warfilename}" todir="${ccg.approot}"/>
	</target>
    
    <target name="deployCerts">
      <mkdir dir="${ccg.yabiCertDir}"/>
      <copy todir="${ccg.yabiCertDir}" >
        <fileset dir="${basedir}/tmp/ccg/yabi-mw/certificates/" >
          <include name="**/*"/>
        </fileset>
      </copy>
    </target>
	
    <target name="release" depends="tags, releaseinit, tmpSvnCheckoutTag, createWar, deployWar, deployCerts, deployTools, deployJson, deployToolsDirs" />
    <target name="snapshot" depends="snapshotinit, tmpSvnCheckout, createWar, deployWar, deployCerts" />	
    <target name="usercompile" depends="userbuildinit, compile" />
    <target name="devcompile" depends="userbuildinit, nttcompile" />
    <target name="userwar" depends="userbuildinit, createWar, deployWar, deployTools, deployJson, deployToolsDirs" />
    <target name="toolsonly" depends="userbuildinit, deployTools, deployJson, deployToolsDirs" />
</project>
