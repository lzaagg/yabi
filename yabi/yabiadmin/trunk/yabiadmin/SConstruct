import scons_utils
import os, sys

# locations
install_prefix = "/usr/local/php5/ccgapps"
apache_conf_prefix = "/usr/local/php5/conf/ccg-wsgi"

# set our directory for our utilities
scons_utils.install_prefix = install_prefix

# our custom environment
env = scons_utils.EnvironmentFactory( Environment, Builder, os.environ )

##
## Put here your directories to install. These are recursively copied. 'pyc', 'pyo' and '.svn' files are ommited in the copy
##
directories = ['templates', 'yabmin', 'static']

##
## Put here any destination directories you want created and made writable by the webserver
##
scratch_dirs = ['scratch']

##
## Any files under these directories, with these extensions will be copied to the deploy area
##
directory_content_globs = ['*.py', '*.html', '*.mako', '*.txt', '*.png', '*.js', '*.css', '*.jpg', '*.gif', '*.pdf', '*.xml', '*.wsgi', '*.ttf' ]
##
## But as we recurse, ignore these:
##
directory_subdir_ignore = ['.svn','.cvs']

##
## project_name is used to buind filenames and directories for the project that can be easily identified. this MUST be the name of the django project directly under trunk/
## because that is how the 'snapshot' target finds it
##
project_name = 'yabiadmin'

##
## wsgi file
##
wsgi_file = 'yabiadmin.wsgi'

##
## All the directories we want an Apache Alias set up to point to
##
alias_dirs = ['static']
        
        
        #################################
        ## DO NOT EDIT BELOW THIS LINE ##
        #################################
        
        
##
## work out our destination paths
##
install_dir = os.path.join( install_prefix, project_name )

##
## The default install. Installs the present project dir into a username based destination
##
from pwd import getpwuid
tag = getpwuid(os.getuid())[0]          # tag is our username

directory = os.path.join( install_dir, tag, project_name )
apache_directory = apache_conf_prefix
source_directory = "."

# all the files
ins = scons_utils.RecursiveInstallFiles( env, dest_dir = directory,
                    src_dir = source_directory,
                    includes = directory_content_globs,
                    excludes = directory_subdir_ignore
                )
env.AddPostAction( ins, env.Chmod(str(directory),0775) )

# our virtual python
virtual = env.VirtualPython( Dir(os.path.join( directory, "virtualpython" )), Glob(os.path.join(str(source_directory),'eggs/*')) )
#env.AddPostAction( virtual, env.Chmod(str(virtual),0775) )

# our writable dirs
writabledirs = [env.Command(Dir(os.path.join(directory,X)),None,[Mkdir("$TARGET"),Chmod("$TARGET", 0777)]) for X in scratch_dirs]

# our apache config files
apacheconf = env.ApacheWSGI( File(os.path.join( apache_directory, "%s:%s"%(project_name,tag) )), File(wsgi_file)) 
#env.AddPostAction( apacheconf, env.Chmod(str(apacheconf),0775) )
apachealias = env.ApacheAlias( File(os.path.join( apache_directory, "%s:%s-aliases"%(project_name,tag) )), [Dir(x) for x in alias_dirs])
#env.AddPostAction( apachealias, env.Chmod(str(apachealias),0775) )

Alias(tag, [ins, writabledirs, virtual, apacheconf, apachealias])

# this is the default build
Default(tag)
    
##
## svn snapshot checks out trunk and then builds it
##
svn_info = scons_utils.SubversionReposInfo()
svn_tags = scons_utils.SvnPathToTags(svn_info['url'])           # if this returns None, we aren't in trunk, we are already in a tag,
    
def TargetCheckoutTag(tag):
        directory = os.path.join( install_dir, tag, project_name )
        apache_directory = apache_conf_prefix
        source_directory = Dir("tmp/%s"%tag)
        
        co_dir = source_directory
        checkout = env.Command(co_dir, None, "svn co %s/%s %s"%(svn_tags,tag,co_dir))
        Alias("checkout-"+tag, checkout)
        
        comm = env.Command("install-"+tag,checkout,"cd $SOURCE/%s; scons %s"%(project_name,tag))
        Alias(tag,"install-"+tag)
        
def TargetCheckoutTrunk(tag):
        directory = os.path.join( install_dir, tag, project_name )
        apache_directory = apache_conf_prefix
        source_directory = Dir("tmp/%s"%tag)
        
        co_dir = source_directory
        svn_trunk = "/".join(svn_tags.split("/")[:-1]+['trunk'])
        checkout = env.Command(co_dir, None, "svn co %s %s"%(svn_trunk,co_dir))
        Alias("checkout-"+tag, checkout)
        
        comm = env.Command("install-"+tag,checkout,"cd $SOURCE/%s; scons %s"%(project_name,tag))

##
## Build and deploy the present directory as tag
##
def TargetPresent(tag):
        directory = os.path.join( install_dir, tag, project_name )
        apache_directory = apache_conf_prefix
        source_directory = "."
        
        ins = scons_utils.RecursiveInstallFiles( env, dest_dir = directory,
                    src_dir = source_directory,
                    includes = directory_content_globs,
                    excludes = directory_subdir_ignore
                )
        env.AddPostAction( ins, env.Chmod(str(directory),0775) )

        # our virtual python
        virtual = env.VirtualPython( Dir(os.path.join( directory, "virtualpython" )), Glob(os.path.join(str(source_directory),'eggs/*')) )
       
        # our writable dirs
        writabledirs = [env.Command(Dir(os.path.join(directory,X)),None,[Mkdir("$TARGET"),Chmod("$TARGET", 0777)]) for X in scratch_dirs]
        
        # our apache config files
        apacheconf = env.ApacheWSGI( File(os.path.join( apache_directory, "%s:%s"%(project_name,tag) )), File(wsgi_file)) 
        apachealias = env.ApacheAlias( File(os.path.join( apache_directory, "%s:%s-aliases"%(project_name,tag) )), [Dir(x) for x in alias_dirs])
        
        Alias(tag, [ins, writabledirs, virtual, apacheconf, apachealias])


##
## Construct our special build targets
##

#if we are not in a tag, and are in trunk, the following applies
if svn_tags:
    svn_list = scons_utils.SubversionList(svn_tags)
    
    for rev, tag, name, date in svn_list:
        TargetCheckoutTag(tag)
        
    # we are in trunk. add a 'trunk' target
    # add the install tag as us 
    TargetPresent('trunk')
    
    TargetCheckoutTrunk('trunk')
    Alias('snapshot','install-trunk')
    Alias('trunk','install-trunk')
    
    # create release tag. this is a synonym for the latest tag, plus builds a symlink
    if svn_list:
        latest_tag = sorted(svn_list)[-1][1]
        Alias('install-release',latest_tag)
        
        # if we are doing a release, clear out these symlinks so we will recreate them
        if 'live' in COMMAND_LINE_TARGETS:
            try:
                os.unlink(os.path.join(apache_conf_prefix,"%s:release"%(project_name)))
                os.unlink(os.path.join(install_dir,"release"))
            except OSError, ose:
                pass
        
    if True in [X in COMMAND_LINE_TARGETS for X in ['trunk','snapshot','release']+svn_list]:
        import shutil
        try:
            shutil.rmtree("tmp")
        except OSError, ose:
            pass
        try:
            shutil.rmtree(os.path.join( install_dir, 'trunk'))
        except OSError, ose:
            pass
        
        
    if svn_list:
        symlink_apache = env.ApacheWSGI( File(os.path.join( apache_directory, "%s:release"%(project_name) )), File(wsgi_file)) 
        #env.SymLink( File(os.path.join(apache_conf_prefix,"%s:release"%project_name)), File(os.path.join(apache_conf_prefix,"%s:%s"%(project_name,latest_tag))))
        symlink_project = env.SymLink( Dir(os.path.join(install_dir,"release")), Dir(os.path.join(install_dir,latest_tag)))
    

        Alias('release', 'install-release' )
        Alias('live', [ 'release', symlink_apache, symlink_project] )
    
else:
    #
    # We are in a tag directory. Add the target for this tag we are in. named by name.
    #
    tag_name = scons_utils.SvnTagName(svn_info['url'])
    TargetPresent(tag_name)
