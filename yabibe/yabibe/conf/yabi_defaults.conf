#
# Backend section
# ===============
#
[backend]

#
# HTTP Services
# -------------
# These settings configure the details of the yabi backend http service.
#

#
# port: ipnumber:port
# The ip number and port to bind our http interface to. Use 0.0.0.0 as an ip number to bind to every interface
#
port: 127.0.0.1:9001 


#
# start_http: yes|no
# Controls if the http service is started. set to true or yes to start up. Set to no or false to not start a http service.
#
start_http: yes


#
# HTTPS Services
# --------------
# These settings control the details of any https services yabi backend serves up.
#

#
# sslport: ipnumber:port
# the ip number and port to bind our https service to.  Use 0.0.0.0 as an ip number to bind to every interface
#
sslport: 0.0.0.0:9431


#
# keyfile: /path/to/key.pem
# filesystem location of the SSL PEM format cryptographic key
#
keyfile: ~/.yabi/run/serverkey.pem


#
# certfile: /path/to/cert.pem
# filesystem location of the SSL PEM format server certificate
#
certfile: ~/.yabi/run/servercert.pem


#
# start_https: yes|no
# controls if the https service should be started on startup.
#
start_https: no


#
# admin: URL
# This is the base URL where the backend sends yabiamin requests to. This should point to your yabi admin installation.
# NOTE: If this is a http URL then your credentials may be prone to being sniffed on the network. To make sure the system
# is secure, use a https url and serve your yabiadmin via https.
#
admin: http://127.0.0.1:8000/

#
# admin_cert_check: yes
# If the url for admin is https, then this setting controls if you want the certificate chain checked. If you are using
# a self signed SSL certificate on your yabiadmin server, and want to open yourself up to man in the middle attacks, set 
# this to no.
#
admin_cert_check: yes


#
# runningdir: /path/to/storage/area
# yabi needs a place to store temporary files and credentials. This is the path under which to store them. It's also
# the working directory that yabi backend will run within.
#
runningdir: ~/.yabi/run/


#
# pidfile: /path/to/yabi/backend/pidfile
# specify the file location to store the process id in
# NOTE: This is only used by the backend init.d script. If you start the backend via fab or otherwise, this will not work.
#
pidfile: ~/.yabi/run/yabibe.pid


#
# logfile: /path/to/yabi/backend/logfile
# specify a file location to write the yabi logfile to.
# NOTE: This is only used by the backend init.d script. If you start the backend via fab or otherwise, this will not work.
#
logfile: ~/.yabi/run/yabibe.log 


#
# syslog_facility: LOG_DAEMON
# Specify the syslog facility to log under
# NOTE: This is only used if the backend is launched by passing --syslog into the twistd command line
#
syslog_facility: LOG_DAEMON


#
# syslog_prefix: log prefix
# All syslog reporting will be prefixed by this message. You can reference some variables in the message to assist you
# use %(varname)s to place the variable where varname is one of:
#       {username}: the name of the user running the backend server
#       {pid}: the processid of the backend server
#
syslog_prefix: yabi backend {username}


#
# fifos: /path/to/fifo/store
# path to a writable directory where yabi backend can store FIFOs
#
fifos: ~/.yabi/run/backend/fifos/


#
# tasklets: /path/to/tasklet/store
# path to a writable directory to store running tasklets in. This is used when the backend is stopped and started.
# The running tasklets (representing executing jobs) are serialised and stored on disk so they can be resumed on
# startup.
#
tasklets: ~/.yabi/run/backend/tasklets/	


#
# temp: /path/to/temporary/directory
# This is just a place where the backend can store temporary files
#
temp: ~/.yabi/run/backend/temp/	


#
# certificates: /path/to/certificate/store
# path to a writable directory where the backend can store any temporary access certificates needed to access certain
# backends. For example: short lived grid proxy certificates are stored here when accessing grid services.
#
certificates: ~/.yabi/run/backend/certificates/ 


#
# debug: yes|no
# Whether to turn on debug mode to get more information from the backend.
#
debug: no


#
# hmackey: HMAC_authorisation_key
# this is a secret key shared between yabi admin and the backend. It is used to authenticate and secure the access both
# to the backend and to certain backend specific services in the yabi admin. If these keys are not the same, yabiadmin and
# yabi backend cannot talk to each other.
# NOTE: the security of the system depends on keeping this key unique and secret.
#
hmackey: set_this


# 
# TaskManager
# ===========
# The taskmanager is a component of the backend that consumes tasks from the admin and runs them. It is the component that
# actually grabs and controls the runing of jobs. It connects to the admin and asks for the next job. If it gets a job it
# starts it, and then immediately returns to admin to ask for another. If no more jobs are present, it waits [polldelay]
# seconds before trying to ask again.
#
[taskmanager]


#
# polldelay: seconds
# the number of seconds to wait after a failed job request to admin before asking again.
#
polldelay: 5


#
# startup: yes|no
# this should be set to 'true' or 'yes' if you want to run jobs. If this is set to 'false' or 'no', the TaskManager
# component doesn't run, and the backend becomes a services only backend. This can be used in more complicated setups.
# Most users will set this to 'yes'
#
startup: yes


#
# tasktag: task_identifier_string
# this setting should be consistent with the setting in yabiadmin for the jobs you want this backend to consume. This
# setting enables you to run different yabiadmin/yabibe stacks on the same database. When yabiadmin stores a task it sets
# a tasktag to identify which backend should grab the task and execute it. The backend asks for tasks with a certain tag...
# this tag specified here. Make sure it is set to the same as that which is set in your yabiadmin.
#
tasktag: set_this


#
# retrywindow: seconds
# The number of seconds we should continue to retry backend task management activities. This applies to all remote backend
# operations. File lists, making directories, copying files, moving files, creating links, deleting files, sumbitting cluster 
# jobs, checking job status, cleaning up and so on. Because cluster computing often combines large number of users on shared
# machines under load, sometimes all manner of operations can be stymied by intermittent problems. Any of these operations
# will be retried (with an exponential backoff) for a total of this many seconds. Note that this will prevent real hard errors
# from being noticed in the yabi systems for this amount of time. Take for instance if you set up an ssh backend in yabi
# but werent running ssh on the host. Your job would appear to be running for this long before you saw the error. On production
# environments, you want this to be quite long. We would suggest at least an hour (a setting of 3600). For development work you
# want it set much lower (like a value of 10 seconds).
#
retrywindow: 60


#
# Execution Plugin Global Settings
# ================================
# These settings control some aspects of the execution plugins. The settings apply to all the plugins.
[execution]

#
# Log the full command for each job submission on a cluster. This is useful for debug. You can turn this off when all your
# execution backends are operating properly.
#
logcommand: yes

#
# Log any scripts associated with the job submission. This is again useful for debug.
# 
logscripts: yes



#
# SSH+SGE Backend Connector settings
# ==================================
# These settings control the path that the ssh+sge backend connectors use on the remote end to find tools
[ssh+sge]

#
# The full path on the remote host to the qstat SGE executable
#
qstat: qacct

#
# The full path on the remote host to the qsub SGE executable
#
qsub: qsub

#
# The full path on the remote host to the qacct SGE executable
#
qacct: qacct


[torque]

qstat: /usr/bin/qstat-torque

qsub: /usr/bin/qsub-torque

use_sudo: no

sudo: /usr/bin/sudo


[ssh+torque]

qstat: /usr/bin/qstat-torque

qsub: /usr/bin/qsub-torque


[ssh+pbspro]

qstat: /opt/pbs/default/bin/qstat

qsub: /opt/pbs/default/bin/qsub
